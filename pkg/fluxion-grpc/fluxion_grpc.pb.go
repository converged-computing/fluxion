// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/fluxion-grpc/fluxion.proto

package fluxion_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FluxcliServiceClient is the client API for FluxcliService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FluxcliServiceClient interface {
	// Sends a Match command
	Match(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error)
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
}

type fluxcliServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFluxcliServiceClient(cc grpc.ClientConnInterface) FluxcliServiceClient {
	return &fluxcliServiceClient{cc}
}

func (c *fluxcliServiceClient) Match(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, "/fluxion.FluxcliService/Match", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluxcliServiceClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, "/fluxion.FluxcliService/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluxcliServiceClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, "/fluxion.FluxcliService/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FluxcliServiceServer is the server API for FluxcliService service.
// All implementations must embed UnimplementedFluxcliServiceServer
// for forward compatibility
type FluxcliServiceServer interface {
	// Sends a Match command
	Match(context.Context, *MatchRequest) (*MatchResponse, error)
	Cancel(context.Context, *CancelRequest) (*CancelResponse, error)
	Init(context.Context, *InitRequest) (*InitResponse, error)
	mustEmbedUnimplementedFluxcliServiceServer()
}

// UnimplementedFluxcliServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFluxcliServiceServer struct {
}

func (UnimplementedFluxcliServiceServer) Match(context.Context, *MatchRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Match not implemented")
}
func (UnimplementedFluxcliServiceServer) Cancel(context.Context, *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedFluxcliServiceServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedFluxcliServiceServer) mustEmbedUnimplementedFluxcliServiceServer() {}

// UnsafeFluxcliServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FluxcliServiceServer will
// result in compilation errors.
type UnsafeFluxcliServiceServer interface {
	mustEmbedUnimplementedFluxcliServiceServer()
}

func RegisterFluxcliServiceServer(s grpc.ServiceRegistrar, srv FluxcliServiceServer) {
	s.RegisterService(&FluxcliService_ServiceDesc, srv)
}

func _FluxcliService_Match_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluxcliServiceServer).Match(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fluxion.FluxcliService/Match",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluxcliServiceServer).Match(ctx, req.(*MatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluxcliService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluxcliServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fluxion.FluxcliService/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluxcliServiceServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluxcliService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluxcliServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fluxion.FluxcliService/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluxcliServiceServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FluxcliService_ServiceDesc is the grpc.ServiceDesc for FluxcliService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FluxcliService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fluxion.FluxcliService",
	HandlerType: (*FluxcliServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Match",
			Handler:    _FluxcliService_Match_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _FluxcliService_Cancel_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _FluxcliService_Init_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/fluxion-grpc/fluxion.proto",
}
